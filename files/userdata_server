#!/bin/bash
set -x
export curlimage=appropriate/curl
export jqimage=ghcr.io/jqlang/jq
export semver2_version=1.0.5

if [ `command -v curl` ]; then
  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
  curl -sLf https://github.com/Ariel-Rodriguez/sh-semversion-2/archive/refs/tags/v$semver2_version.tar.gz | tar xvfz - -C /usr/bin --strip-components=1 sh-semversion-2-$semver2_version/semver2.sh && \
    chmod +x /usr/bin/semver2.sh
elif [ `command -v wget` ]; then
  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
  wget -qO- https://github.com/Ariel-Rodriguez/sh-semversion-2/archive/refs/tags/v$semver2_version.tar.gz | tar xvfz - -C /usr/bin --strip-components=1 sh-semversion-2-$semver2_version/semver2.sh && \
    chmod +x /usr/bin/semver2.sh
fi

### Customize Kernel parameters
echo "Force kernel module nf_conntrack at boot"
grep -q "nf_conntrack" /etc/modules || \
  echo "nf_conntrack" | tee -a /etc/modules
grep -q "net.netfilter.nf_conntrack_max" /etc/sysctl.conf || \
  echo "net.netfilter.nf_conntrack_max = ${kernel_nf_conntrack_max}" | tee -a /etc/sysctl.conf
sysctl -p /etc/sysctl.conf
###

rancherimage="rancher/rancher:${rancher_version}"
if [ -n "${rancher_registry}" ]; then
  if docker pull "${rancher_registry}/rancher/rancher:${rancher_version}"; then
    rancherimage="${rancher_registry}/rancher/rancher:${rancher_version}"
  fi
fi

for image in $curlimage $jqimage $rancherimage; do
  until docker inspect $image > /dev/null 2>&1; do
    docker pull $image
    sleep 2
  done
done

docker run -d -e CATTLE_BOOTSTRAP_PASSWORD=administrator -e AUDIT_LEVEL=${audit_level} --privileged --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher --name rancher-server $rancherimage ${rancher_args}

while true; do
  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping && sleep 10 && break
done

RANCHER_2_6_0_COMPARISON=$(semver2.sh ${rancher_version} v2.6)
RANCHER_2_7_6_COMPARISON=$(semver2.sh ${rancher_version} v2.7.6)
RANCHER_2_5_0_COMPARISON=$(semver2.sh ${rancher_version} v2.5)
RANCHER_2_12_0_COMPARISON=$(semver2.sh ${rancher_version} v2.12)
LESS_THAN=-1
GREATER_THAN=1
EQUAL_TO=0

if [ $RANCHER_2_6_0_COMPARISON = $LESS_THAN ]; then
    export ADMIN_PASSWORD="admin"
else
    export ADMIN_PASSWORD="administrator"
fi

if [ $RANCHER_2_7_6_COMPARISON = $GREATER_THAN ]; then
    # wait for capi-controller-manager (capi-webhook-service) to be ready
    while ! docker exec rancher-server kubectl rollout status -w -n cattle-provisioning-capi-system deploy/capi-controller-manager; do
        sleep 5
    done
fi

if [ $RANCHER_2_5_0_COMPARISON = $GREATER_THAN ] || [ $RANCHER_2_5_0_COMPARISON = $EQUAL_TO ]; then
    # wait for rancher-webook to be ready
    while ! docker exec rancher-server kubectl rollout status -w -n cattle-system deploy/rancher-webhook; do
        sleep 5
    done
fi

# Login
while true; do

    LOGINRESPONSE=$(docker run \
        --rm \
        --net=host \
        $curlimage \
        -s "https://127.0.0.1/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"'"$${ADMIN_PASSWORD}"'"}' --insecure)
    if [ "x$LOGINRESPONSE" = "x" ]; then
        continue
    fi
    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)

    if [ "$LOGINTOKEN" != "null" ]; then
        break
    else
        sleep 5
    fi
done


# Change password
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"'"$${ADMIN_PASSWORD}"'","newPassword":"${admin_password}"}' --insecure

# Create API key
while true; do

    APIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure)
    if [ "x$APIRESPONSE" = "x" ]; then
        continue
    fi

    # Extract and store token
    APITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`

    if [ "x$APITOKEN" != "x" ]; then
        break
    else
        sleep 5
    fi
done

# Configure server-url
RANCHER_SERVER="https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)"

while true; do
    docker run --rm --net=host $curlimage -s "$RANCHER_SERVER/v3/settings/server-url" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X PUT --data-binary '{"name":"server-url","value":"'$RANCHER_SERVER'"}' --insecure

    # reading it back
    CURRENTSERVERURL=$(docker run --rm --net=host $curlimage -s "$RANCHER_SERVER/v3/settings/server-url" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | docker run --rm -i $jqimage -r .value)

    if [ "x$CURRENTSERVERURL" != "x" ]; then
        break
    else
        sleep 5
    fi
done

# Create RKE cluster (only available in v2.11.x and lower)
if [ $RANCHER_2_12_0_COMPARISON = $LESS_THAN ]; then
    # Check for available k8s versions if not specifically set
    if [ -z "${k8s_version}" ]; then
        while true; do
            K8SVERSIONRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/k8s-version' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
            K8SVERSION=$(echo $K8SVERSIONRESPONSE | docker run --rm -i $jqimage -r .value)
            echo "K8SVERSION: "$K8SVERSION""

            if [ "$K8SVERSION" != "" ]; then
                break
            else
                sleep 5
            fi
        done
    else
        K8SVERSION="${k8s_version}"
    fi

    # Create RKE1 cluster
    CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"${docker_root}","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"kubernetesVersion":"${k8s_version}","addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"${rke_cni}"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"creation":"12h","extraArgs":{"heartbeat-interval":500,"election-timeout":5000},"retention":"72h","snapshot":false,"type":"etcdService","backupConfig":{"enabled":true,"intervalHours":12,"retention":6,"type":"backupConfig"}}}},"localClusterAuthEndpoint":{"enabled":true,"type":"localClusterAuthEndpoint"},"name":"${cluster_name}"}' --insecure)
    # Extract clusterid to use for generating the docker run command
    CLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`

    # Generate registrationtoken
    docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure
fi

# Create RKE2 cluster (only available in v2.6.x and higher)
if [ $RANCHER_2_6_0_COMPARISON = $GREATER_THAN ] || [ $RANCHER_2_6_0_COMPARISON = $EQUAL_TO ]; then
    RKE2_K8S_VERSION=${k8s_rke2_version}
    if [[ "x$${RKE2_K8S_VERSION}" == "x" ]]; then
    # Look up latest available
    ALL_RKE2_K8S=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1-rke2-release/releases' --insecure)
    LATEST_RKE2_K8S=`echo $ALL_RKE2_K8S | docker run --rm -i $jqimage -r '.data[] | select(.type=="release") | .id' | tail -1`
    RKE2_K8S_VERSION=$LATEST_RKE2_K8S
    fi

    #CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1/provisioning.cattle.io.clusters' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"provisioning.cattle.io.cluster","metadata":{"namespace":"fleet-default","name":"${cluster_rke2_name}"},"spec":{"kubernetesVersion":"'$${RKE2_K8S_VERSION}'","rkeConfig":{"upgradeStrategy":{"controlPlaneConcurrency":"10%","controlPlaneDrainOptions":{},"workerConcurrency":"10%","workerDrainOptions":{}},"controlPlaneConfig":{"audit-policy-file":null,"cluster-cidr":null,"cluster-dns":null,"cluster-domain":null,"cni":"calico","disable":null,"etcd-disable-snapshots":null,"etcd-expose-metrics":null,"etcd-snapshot-dir":null,"etcd-snapshot-name":null,"etcd-snapshot-retention":null,"etcd-snapshot-schedule-cron":null,"kube-apiserver-arg":null,"kube-controller-manager-arg":null,"kube-scheduler-arg":null,"profile":null,"secrets-encryption":null,"service-cidr":null,"service-node-port-range":null,"tls-san":null},"workerConfig":[{"audit-policy-file":null,"cloud-provider-config":null,"cloud-provider-name":"none","kubelet-arg":null,"profile":null,"protect-kernel-defaults":null,"selinux":null,"system-default-registry":null}],"localClusterAuthEndpoint":{"enabled":false,"caCerts":"","fqdn":""},"nodePools":[]},"defaultPodSecurityPolicyTemplateName":null}}' --insecure)
    CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1/provisioning.cattle.io.clusters' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"provisioning.cattle.io.cluster","metadata":{"namespace":"fleet-default","name":"${cluster_rke2_name}"},"spec":{"kubernetesVersion":"'$${RKE2_K8S_VERSION}'","rkeConfig":{"machineGlobalConfig":{"cni":"${rke2_cni}"},"upgradeStrategy":{"controlPlaneConcurrency":"10%","controlPlaneDrainOptions":{},"workerConcurrency":"10%","workerDrainOptions":{}},"localClusterAuthEndpoint":{"enabled":false,"caCerts":"","fqdn":""},"machinePools":[]},"defaultPodSecurityPolicyTemplateName":null}}' --insecure)
    # Get  clusterid to use for generating the docker run command
    CLUSTERID=`docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusters?name=${cluster_rke2_name}' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | docker run --rm -i $jqimage -r .data[].id`

    # Generate RKE2 registrationtoken
    docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure
fi

#CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1/provisioning.cattle.io.clusters' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"provisioning.cattle.io.cluster","metadata":{"namespace":"fleet-default","name":"${cluster_rke2_name}"},"spec":{"kubernetesVersion":"'$${RKE2_K8S_VERSION}'","rkeConfig":{"upgradeStrategy":{"controlPlaneConcurrency":"10%","controlPlaneDrainOptions":{},"workerConcurrency":"10%","workerDrainOptions":{}},"controlPlaneConfig":{"audit-policy-file":null,"cluster-cidr":null,"cluster-dns":null,"cluster-domain":null,"cni":"calico","disable":null,"etcd-disable-snapshots":null,"etcd-expose-metrics":null,"etcd-snapshot-dir":null,"etcd-snapshot-name":null,"etcd-snapshot-retention":null,"etcd-snapshot-schedule-cron":null,"kube-apiserver-arg":null,"kube-controller-manager-arg":null,"kube-scheduler-arg":null,"profile":null,"secrets-encryption":null,"service-cidr":null,"service-node-port-range":null,"tls-san":null},"workerConfig":[{"audit-policy-file":null,"cloud-provider-config":null,"cloud-provider-name":"none","kubelet-arg":null,"profile":null,"protect-kernel-defaults":null,"selinux":null,"system-default-registry":null}],"localClusterAuthEndpoint":{"enabled":false,"caCerts":"","fqdn":""},"nodePools":[]},"defaultPodSecurityPolicyTemplateName":null}}' --insecure)
HARDENING=$${hardening:-false}
if [ "$HARDENING" = "false" ]; then
CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1/provisioning.cattle.io.clusters' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"provisioning.cattle.io.cluster","metadata":{"namespace":"fleet-default","name":"${cluster_rke2_name}"},"spec":{"kubernetesVersion":"'$${RKE2_K8S_VERSION}'","rkeConfig":{"machineGlobalConfig":{"cni":"${rke2_cni}"},"upgradeStrategy":{"controlPlaneConcurrency":"10%","controlPlaneDrainOptions":{},"workerConcurrency":"10%","workerDrainOptions":{}},"localClusterAuthEndpoint":{"enabled":false,"caCerts":"","fqdn":""},"machinePools":[]},"defaultPodSecurityPolicyTemplateName":null}}' --insecure)
else
PROFILE=${profile}
DEFAULT_PSACT=${psact}
CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v1/provisioning.cattle.io.clusters' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"provisioning.cattle.io.cluster","metadata":{"namespace":"fleet-default","name":"${cluster_rke2_name}"},"spec":{"kubernetesVersion":"'$${RKE2_K8S_VERSION}'","rkeConfig":{"machineGlobalConfig":{"cni":"${rke2_cni}","kube-apiserver-arg":["admission-control-config-file=/etc/rancher/rke2/config/rancher-psact.yaml"]},"machineSelectorConfig":[{"config":{"profile":"'$${PROFILE}'","protect-kernel-defaults":true}}],"upgradeStrategy":{"controlPlaneConcurrency":"10%","controlPlaneDrainOptions":{},"workerConcurrency":"10%","workerDrainOptions":{}},"localClusterAuthEndpoint":{"enabled":false,"caCerts":"","fqdn":""},"machinePools":[]},"defaultPodSecurityAdmissionConfigurationTemplateName":"'$${DEFAULT_PSACT}'"}}' --insecure)
fi

# Get  clusterid to use for generating the docker run command
CLUSTERID=`docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusters?name=${cluster_rke2_name}' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | docker run --rm -i $jqimage -r .data[].id`

# Generate RKE2 registrationtoken
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure

# CLI (optional)
API_CLI_URL_LINUX=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/cli-url-linux' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
CLI_URL_LINUX=`echo $API_CLI_URL_LINUX | docker run --rm -i $jqimage -r .value`

# Extract binary to /usr/local/bin
docker run -v /usr/local/bin:/usr/local/bin $curlimage sh -c "curl -sLk $CLI_URL_LINUX | tar xz --strip-components=2 -C /usr/local/bin"

# Get cacerts to validate connection
API_CACERTS=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/cacerts' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
CACERTS=$(echo $API_CACERTS | docker run --rm -i $jqimage -r .value)
echo "$CACERTS" > /root/cacerts

# Accept anything for project
echo 1 | rancher login --cacert /root/cacerts --token $APITOKEN https://127.0.0.1/v3
ln -s /.rancher ~/.rancher
